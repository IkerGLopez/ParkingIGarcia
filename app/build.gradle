plugins {
    id "org.sonarqube" version "4.4.1.3373"
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'org.sonarqube'

sonar {
    properties {
        property "sonar.projectKey", "IkerGLopez_ParkingIGarcia"
        property "sonar.organization", "parkingigarcia"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.10" // Puedes cambiar a la versión más reciente
}

android {
    namespace "com.lksnext.parkingplantilla"
    buildToolsVersion "35.0.0"
    compileSdk 35

    defaultConfig {
        applicationId "com.lksnext.parkingplantilla"
        minSdkVersion 26
        targetSdkVersion 35
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    lint {
        baseline = file("lint-baseline.xml")
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.navigation:navigation-fragment:2.8.9'
    implementation 'androidx.navigation:navigation-ui:2.8.9'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'org.apache.commons:commons-compress:1.26.1'
    implementation 'com.google.guava:guava:32.1.2-jre'

    testImplementation 'junit:junit:4.+'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'net.bytebuddy:byte-buddy:1.14.6'
    testImplementation 'net.bytebuddy:byte-buddy-agent:1.14.6'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'com.google.firebase:firebase-auth:22.1.1'
    testImplementation 'com.google.firebase:firebase-firestore:24.7.1'

    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'

    //CALENDARIO
    implementation 'com.prolificinteractive:material-calendarview:1.4.3'


    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:33.15.0')


    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics'


    // Add the dependencies for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries

    // LOGIN AUTH
    implementation("com.google.firebase:firebase-auth")

    // DATABASE
    implementation("com.google.firebase:firebase-firestore:25.1.4")

    //QR GENERATOR
    implementation 'com.google.zxing:core:3.5.1'
    implementation 'com.google.zxing:javase:3.5.1'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*'
    ]
    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([debugTree])
    executionData.setFrom fileTree(dir: buildDir, includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
    ])
}
